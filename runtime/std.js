const log = (val) => {return out(string(val) + __Ink_String('\n'))};
module.exports.log = log;
const scan = (cb) => (() => {let acc = [__Ink_String(``)]; return __ink_in((evt) => {return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null); })(), [[() => __Ink_String(`end`), () => cb((() => {let __ink_acc_trgt = __as_ink_string(acc); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null); })())], [() => __Ink_String(`data`), () => (() => {(() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(0, (() => {let __ink_acc_trgt = __as_ink_string(acc); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null); })() + slice((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[data] || null : (__ink_acc_trgt.data !== undefined ? __ink_acc_trgt.data : null); })(), 0, len((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[data] || null : (__ink_acc_trgt.data !== undefined ? __ink_acc_trgt.data : null); })()) - 1)) : (__ink_assgn_trgt[0]) = (() => {let __ink_acc_trgt = __as_ink_string(acc); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null); })() + slice((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[data] || null : (__ink_acc_trgt.data !== undefined ? __ink_acc_trgt.data : null); })(), 0, len((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[data] || null : (__ink_acc_trgt.data !== undefined ? __ink_acc_trgt.data : null); })()) - 1); return __ink_assgn_trgt})(); return false})()]])})})();
module.exports.scan = scan;
const hToN = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, [__Ink_String(`a`)]: 10, [__Ink_String(`b`)]: 11, [__Ink_String(`c`)]: 12, [__Ink_String(`d`)]: 13, [__Ink_String(`e`)]: 14, [__Ink_String(`f`)]: 15};
module.exports.hToN = hToN;
const nToH = __Ink_String(`0123456789abcdef`);
module.exports.nToH = nToH;
const hex = (n) => {return (() => {sub = (p, acc) => {return __ink_match(p < 16, [[() => true, () => (() => {let __ink_acc_trgt = __as_ink_string(nToH); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return p})()] || null : (__ink_acc_trgt[(() => {return p})()] !== undefined ? __ink_acc_trgt[(() => {return p})()] : null); })() + acc], [() => false, () => sub(floor(p / 16), (() => {let __ink_acc_trgt = __as_ink_string(nToH); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return p % 16})()] || null : (__ink_acc_trgt[(() => {return p % 16})()] !== undefined ? __ink_acc_trgt[(() => {return p % 16})()] : null); })() + acc)]])}; return sub})()(floor(n), __Ink_String(``))};
module.exports.hex = hex;
const xeh = (s) => (() => {let max = len(s); return (() => {sub = (i, acc) => {return __ink_match(i, [[() => max, () => acc], [() => __Ink_Empty, () => sub(i + 1, acc * 16 + (() => {let __ink_acc_trgt = __as_ink_string(hToN); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return i})()] || null : (__ink_acc_trgt[(() => {return i})()] !== undefined ? __ink_acc_trgt[(() => {return i})()] : null); })()})()] || null : (__ink_acc_trgt[(() => {return (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return i})()] || null : (__ink_acc_trgt[(() => {return i})()] !== undefined ? __ink_acc_trgt[(() => {return i})()] : null); })()})()] !== undefined ? __ink_acc_trgt[(() => {return (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return i})()] || null : (__ink_acc_trgt[(() => {return i})()] !== undefined ? __ink_acc_trgt[(() => {return i})()] : null); })()})()] : null); })())]])}; return sub})()(0, 0)})();
module.exports.xeh = xeh;
const min = (numbers) => {return reduce(numbers, (acc, n) => {return __ink_match(n < acc, [[() => true, () => n], [() => false, () => acc]])}, (() => {let __ink_acc_trgt = __as_ink_string(numbers); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null); })())};
module.exports.min = min;
const max = (numbers) => {return reduce(numbers, (acc, n) => {return __ink_match(n > acc, [[() => true, () => n], [() => false, () => acc]])}, (() => {let __ink_acc_trgt = __as_ink_string(numbers); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null); })())};
module.exports.max = max;
const range = (start, end, step) => (() => {let span = end - start; let sub = (i, v, acc) => {return __ink_match((() => {return v - start})() / span < 1, [[() => true, () => (() => {(() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => {return i})(), v) : (__ink_assgn_trgt[(() => {return i})()]) = v; return __ink_assgn_trgt})(); return sub(i + 1, v + step, acc)})()], [() => false, () => acc]])}; return __ink_match((() => {return end - start})() / step > 0, [[() => true, () => sub(0, start, [])], [() => false, () => []]])})();
module.exports.range = range;
const clamp = (start, end, min, max) => (() => {start = (() => {return __ink_match(start < min, [[() => true, () => min], [() => false, () => start]])})(); end = (() => {return __ink_match(end < min, [[() => true, () => min], [() => false, () => end]])})(); end = (() => {return __ink_match(end > max, [[() => true, () => max], [() => false, () => end]])})(); start = (() => {return __ink_match(start > end, [[() => true, () => end], [() => false, () => start]])})(); return {start: start, end: end}})();
module.exports.clamp = clamp;
const slice = (s, start, end) => (() => {let x = clamp(start, end, 0, len(s)); start = (() => {let __ink_acc_trgt = __as_ink_string(x); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[start] || null : (__ink_acc_trgt.start !== undefined ? __ink_acc_trgt.start : null); })(); let max = (() => {let __ink_acc_trgt = __as_ink_string(x); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[end] || null : (__ink_acc_trgt.end !== undefined ? __ink_acc_trgt.end : null); })() - start; return (() => {sub = (i, acc) => {return __ink_match(i, [[() => max, () => acc], [() => __Ink_Empty, () => sub(i + 1, (() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => {return i})(), (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return start + i})()] || null : (__ink_acc_trgt[(() => {return start + i})()] !== undefined ? __ink_acc_trgt[(() => {return start + i})()] : null); })()) : (__ink_assgn_trgt[(() => {return i})()]) = (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return start + i})()] || null : (__ink_acc_trgt[(() => {return start + i})()] !== undefined ? __ink_acc_trgt[(() => {return start + i})()] : null); })(); return __ink_assgn_trgt})())]])}; return sub})()(0, __ink_match(type(s), [[() => __Ink_String(`string`), () => __Ink_String(``)], [() => __Ink_String(`composite`), () => []]]))})();
module.exports.slice = slice;
const append = (base, child) => (() => {let baseLength = len(base); let childLength = len(child); return (() => {sub = (i) => {return __ink_match(i, [[() => childLength, () => base], [() => __Ink_Empty, () => (() => {(() => {let __ink_assgn_trgt = __as_ink_string(base); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => {return baseLength + i})(), (() => {let __ink_acc_trgt = __as_ink_string(child); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return i})()] || null : (__ink_acc_trgt[(() => {return i})()] !== undefined ? __ink_acc_trgt[(() => {return i})()] : null); })()) : (__ink_assgn_trgt[(() => {return baseLength + i})()]) = (() => {let __ink_acc_trgt = __as_ink_string(child); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return i})()] || null : (__ink_acc_trgt[(() => {return i})()] !== undefined ? __ink_acc_trgt[(() => {return i})()] : null); })(); return __ink_assgn_trgt})(); return sub(i + 1)})()]])}; return sub})()(0)})();
module.exports.append = append;
const join = (base, child) => {return append(clone(base), child)};
module.exports.join = join;
const clone = (x) => {return __ink_match(type(x), [[() => __Ink_String(`string`), () => __Ink_String(``) + x], [() => __Ink_String(`composite`), () => reduce(keys(x), (acc, k) => {return (() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => {return k})(), (() => {let __ink_acc_trgt = __as_ink_string(x); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return k})()] || null : (__ink_acc_trgt[(() => {return k})()] !== undefined ? __ink_acc_trgt[(() => {return k})()] : null); })()) : (__ink_assgn_trgt[(() => {return k})()]) = (() => {let __ink_acc_trgt = __as_ink_string(x); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return k})()] || null : (__ink_acc_trgt[(() => {return k})()] !== undefined ? __ink_acc_trgt[(() => {return k})()] : null); })(); return __ink_assgn_trgt})()}, {})], [() => __Ink_Empty, () => x]])};
module.exports.clone = clone;
const stringList = (list) => {return __Ink_String(`[`) + cat(map(list, string), __Ink_String(`, `)) + __Ink_String(`]`)};
module.exports.stringList = stringList;
const reverse = (list) => {return (() => {sub = (acc, i, j) => {return __ink_match(j, [[() => 0, () => (() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => {return i})(), (() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null); })()) : (__ink_assgn_trgt[(() => {return i})()]) = (() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null); })(); return __ink_assgn_trgt})()], [() => __Ink_Empty, () => sub((() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => {return i})(), (() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return j})()] || null : (__ink_acc_trgt[(() => {return j})()] !== undefined ? __ink_acc_trgt[(() => {return j})()] : null); })()) : (__ink_assgn_trgt[(() => {return i})()]) = (() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return j})()] || null : (__ink_acc_trgt[(() => {return j})()] !== undefined ? __ink_acc_trgt[(() => {return j})()] : null); })(); return __ink_assgn_trgt})(), i + 1, j - 1)]])}; return sub})()([], 0, len(list) - 1)};
module.exports.reverse = reverse;
const map = (list, f) => {return reduce(list, (l, item, i) => {return (() => {let __ink_assgn_trgt = __as_ink_string(l); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => {return i})(), f(item, i)) : (__ink_assgn_trgt[(() => {return i})()]) = f(item, i); return __ink_assgn_trgt})()}, {})};
module.exports.map = map;
const filter = (list, f) => (() => {let idx = [0]; return reduce(list, (l, item, i) => (() => {__ink_match(f(item, i), [[() => true, () => (() => {(() => {let __ink_assgn_trgt = __as_ink_string(l); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => {return (() => {let __ink_acc_trgt = __as_ink_string(idx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null); })()})(), item) : (__ink_assgn_trgt[(() => {return (() => {let __ink_acc_trgt = __as_ink_string(idx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null); })()})()]) = item; return __ink_assgn_trgt})(); return (() => {let __ink_assgn_trgt = __as_ink_string(idx); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(0, (() => {let __ink_acc_trgt = __as_ink_string(idx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null); })() + 1) : (__ink_assgn_trgt[0]) = (() => {let __ink_acc_trgt = __as_ink_string(idx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null); })() + 1; return __ink_assgn_trgt})()})()]]); return l})(), {})})();
module.exports.filter = filter;
const reduce = (list, f, acc) => (() => {let max = len(list); return (() => {sub = (i, acc) => {return __ink_match(i, [[() => max, () => acc], [() => __Ink_Empty, () => sub(i + 1, f(acc, (() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return i})()] || null : (__ink_acc_trgt[(() => {return i})()] !== undefined ? __ink_acc_trgt[(() => {return i})()] : null); })(), i))]])}; return sub})()(0, acc)})();
module.exports.reduce = reduce;
const reduceBack = (list, f, acc) => {return (() => {sub = (i, acc) => {return __ink_match(i, [[() => __ink_negate(1), () => acc], [() => __Ink_Empty, () => sub(i - 1, f(acc, (() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return i})()] || null : (__ink_acc_trgt[(() => {return i})()] !== undefined ? __ink_acc_trgt[(() => {return i})()] : null); })(), i))]])}; return sub})()(len(list) - 1, acc)};
module.exports.reduceBack = reduceBack;
const flatten = (list) => {return reduce(list, append, [])};
module.exports.flatten = flatten;
const some = (list) => {return reduce(list, (acc, x) => {return __ink_or(acc, x)}, false)};
module.exports.some = some;
const every = (list) => {return reduce(list, (acc, x) => {return __ink_and(acc, x)}, true)};
module.exports.every = every;
const cat = (list, joiner) => (() => {let max = len(list); return __ink_match(max, [[() => 0, () => __Ink_String(``)], [() => __Ink_Empty, () => (() => {sub = (i, acc) => {return __ink_match(i, [[() => max, () => acc], [() => __Ink_Empty, () => sub(i + 1, (() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(acc), joiner + (() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return i})()] || null : (__ink_acc_trgt[(() => {return i})()] !== undefined ? __ink_acc_trgt[(() => {return i})()] : null); })()) : (__ink_assgn_trgt[len(acc)]) = joiner + (() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return i})()] || null : (__ink_acc_trgt[(() => {return i})()] !== undefined ? __ink_acc_trgt[(() => {return i})()] : null); })(); return __ink_assgn_trgt})())]])}; return sub})()(1, clone((() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null); })()))]])})();
module.exports.cat = cat;
const each = (list, f) => (() => {let max = len(list); return (() => {sub = (i) => {return __ink_match(i, [[() => max, () => null], [() => __Ink_Empty, () => (() => {f((() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return i})()] || null : (__ink_acc_trgt[(() => {return i})()] !== undefined ? __ink_acc_trgt[(() => {return i})()] : null); })(), i); return sub(i + 1)})()]])}; return sub})()(0)})();
module.exports.each = each;
const encode = (str) => (() => {let max = len(str); return (() => {sub = (i, acc) => {return __ink_match(i, [[() => max, () => acc], [() => __Ink_Empty, () => sub(i + 1, (() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => {return i})(), point((() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return i})()] || null : (__ink_acc_trgt[(() => {return i})()] !== undefined ? __ink_acc_trgt[(() => {return i})()] : null); })())) : (__ink_assgn_trgt[(() => {return i})()]) = point((() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return i})()] || null : (__ink_acc_trgt[(() => {return i})()] !== undefined ? __ink_acc_trgt[(() => {return i})()] : null); })()); return __ink_assgn_trgt})())]])}; return sub})()(0, [])})();
module.exports.encode = encode;
const decode = (data) => {return reduce(data, (acc, cp) => {return (() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(acc), char(cp)) : (__ink_assgn_trgt[len(acc)]) = char(cp); return __ink_assgn_trgt})()}, __Ink_String(``))};
module.exports.decode = decode;
const readFile = (path, cb) => (() => {let BufSize = 4096; return (() => {sub = (offset, acc) => {return read(path, offset, BufSize, (evt) => {return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null); })(), [[() => __Ink_String(`error`), () => cb(null)], [() => __Ink_String(`data`), () => (() => {dataLen = len((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[data] || null : (__ink_acc_trgt.data !== undefined ? __ink_acc_trgt.data : null); })()); return __ink_match(__ink_eq(dataLen, BufSize), [[() => true, () => sub(offset + dataLen, (() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(acc), (() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[data] || null : (__ink_acc_trgt.data !== undefined ? __ink_acc_trgt.data : null); })()) : (__ink_assgn_trgt[len(acc)]) = (() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[data] || null : (__ink_acc_trgt.data !== undefined ? __ink_acc_trgt.data : null); })(); return __ink_assgn_trgt})())], [() => false, () => cb((() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(acc), (() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[data] || null : (__ink_acc_trgt.data !== undefined ? __ink_acc_trgt.data : null); })()) : (__ink_assgn_trgt[len(acc)]) = (() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[data] || null : (__ink_acc_trgt.data !== undefined ? __ink_acc_trgt.data : null); })(); return __ink_assgn_trgt})())]])})()]])})}; return sub})()(0, __Ink_String(``))})();
module.exports.readFile = readFile;
const writeFile = (path, data, cb) => {return __ink_delete(path, (evt) => {return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null); })(), [[() => __Ink_String(`end`), () => write(path, 0, data, (evt) => {return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null); })(), [[() => __Ink_String(`error`), () => cb(null)], [() => __Ink_String(`end`), () => cb(true)]])})], [() => __Ink_Empty, () => cb(null)]])})};
module.exports.writeFile = writeFile;
const format = (raw, values) => (() => {let state = {idx: 0, which: 0, key: __Ink_String(``), buf: __Ink_String(``)}; let append = (c) => {return (() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(buf, (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null); })() + c) : (__ink_assgn_trgt.buf) = (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null); })() + c; return __ink_assgn_trgt})()}; let readNext = () => (() => {let c = (() => {let __ink_acc_trgt = __as_ink_string(raw); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null); })()})()] || null : (__ink_acc_trgt[(() => {return (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null); })()})()] !== undefined ? __ink_acc_trgt[(() => {return (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null); })()})()] : null); })(); __ink_match((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[which] || null : (__ink_acc_trgt.which !== undefined ? __ink_acc_trgt.which : null); })(), [[() => 0, () => __ink_match(c, [[() => __Ink_String(`{`), () => (() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(which, 1) : (__ink_assgn_trgt.which) = 1; return __ink_assgn_trgt})()], [() => __Ink_Empty, () => append(c)]])], [() => 1, () => __ink_match(c, [[() => __Ink_String(`{`), () => (() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(which, 2) : (__ink_assgn_trgt.which) = 2; return __ink_assgn_trgt})()], [() => __Ink_Empty, () => (() => {append(__Ink_String(`{`) + c); return (() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(which, 0) : (__ink_assgn_trgt.which) = 0; return __ink_assgn_trgt})()})()]])], [() => 2, () => __ink_match(c, [[() => __Ink_String(`}`), () => (() => {(() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(buf, (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null); })() + string((() => {let __ink_acc_trgt = __as_ink_string(values); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null); })()})()] || null : (__ink_acc_trgt[(() => {return (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null); })()})()] !== undefined ? __ink_acc_trgt[(() => {return (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null); })()})()] : null); })())) : (__ink_assgn_trgt.buf) = (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null); })() + string((() => {let __ink_acc_trgt = __as_ink_string(values); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null); })()})()] || null : (__ink_acc_trgt[(() => {return (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null); })()})()] !== undefined ? __ink_acc_trgt[(() => {return (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null); })()})()] : null); })()); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(key, __Ink_String(``)) : (__ink_assgn_trgt.key) = __Ink_String(``); return __ink_assgn_trgt})(); return (() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(which, 3) : (__ink_assgn_trgt.which) = 3; return __ink_assgn_trgt})()})()], [() => __Ink_String(` `), () => null], [() => __Ink_Empty, () => (() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(key, (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null); })() + c) : (__ink_assgn_trgt.key) = (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null); })() + c; return __ink_assgn_trgt})()]])], [() => 3, () => __ink_match(c, [[() => __Ink_String(`}`), () => (() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(which, 0) : (__ink_assgn_trgt.which) = 0; return __ink_assgn_trgt})()], [() => __Ink_Empty, () => null]])]]); return (() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(idx, (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null); })() + 1) : (__ink_assgn_trgt.idx) = (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null); })() + 1; return __ink_assgn_trgt})()})(); let max = len(raw); return (() => {sub = () => {return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null); })() < max, [[() => true, () => (() => {readNext(); return sub()})()], [() => false, () => (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null); })()]])}; return sub})()()})()
module.exports.format = format;
